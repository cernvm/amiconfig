#
# elastiq-setup.py -- by Dario Berzano <dario.berzano@cern.ch>
#
# Plugin for amiconfig for configuring elastiq.
#
# See: https://github.com/dberzano/elastiq
#

import time
import os, stat
import pwd, grp
import base64
import StringIO
import pkgutil
import subprocess

from amiconfig.errors import *
from amiconfig.lib import util
from amiconfig.plugin import AMIPlugin

class AMIConfigPlugin(AMIPlugin):

    # Name of this plugin
    name = 'elastiq-setup'

    # boto configuration file
    boto_cfg = '/etc/boto.cfg'

    # boto final list of CAS
    boto_cas_file = '/etc/boto_cacerts.txt'

    # Sources of CAs: specify directories (will look for every *.pem file) or
    # single files
    boto_ssl_ca_src = [
        '/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/etc/grid-security/certificates'
    ]


    def configure(self):
        """
        elastiq features an ini configuration file with sections, keys and
        values:

        # elastiq configuration file

        [section1]
        key1 = value1

        [section2]
        key2 = value2
        key3 = value3
        ...

        This plugin produces the above file from a single corresponding section
        in amiconfig's user-data:

        [elastiq-setup]
        section1_key1=value1
        section2_key2=value2
        section2_key3=value3
        ...

        where the format of each key/value pair is:

        <section>_<key>=<value>

        Variables can be specified in any order, and they will be grouped in
        sections accordingly.

        The special value:

        cacerts_b64=<base64string>

        is used to specify, encoded in base64, a list of PEM certificates for
        the recognized SSL CAs. This is for boto and it will not end in the
        elastiq configuration file.
        """

        cfgfile = '/etc/elastiq.conf'
        worker_ud = '/var/lib/amiconfig/scalable.user-data'

        cfgraw = self.ud.getSection('elastiq-setup')

        # You can use this space for storing defaults like this:
        # cfgvar = {
        #     'elastiq': {
        #         'sleep_s': 5,
        #         'log_level': 20
        #     }
        # }
        # See https://github.com/dberzano/elastiq/blob/master/elastiq/etc/elastiq.conf.example for inspirationb
        cfgvar = {}

        for k,v in cfgraw.iteritems():
            if k[0:2] == '__' or k == 'cacerts_b64':
                continue
            s = k.split('_', 1)
            if len(s) != 2:
                continue
            section = s[0]
            key = s[1]
            if not section in cfgvar:
                cfgvar[section] = { key: v }
            else:
                cfgvar[section][key] = v

        # Base64'd version of the user-data for workers ("scalable services").
        # If the file worker_ud is present, it is base64'd and it overrides any
        # existing variable already specified.
        try:
            b64d = StringIO.StringIO()
            ud = open(worker_ud, 'r')
            base64.encode(ud, b64d)
            ud.close()
            if not 'ec2' in cfgvar:
                cfgvar['ec2'] = {}
            cfgvar['ec2']['user_data_b64'] = b64d.getvalue().replace('\n', '')
            b64d.close()

        except IOError:
            pass

        #
        # Configuration file contains sensitive information: chown/chmod
        # before writing it
        #

        # Get uid/gid for elastiq/elastiq (they must exist)
        try:
            uid = pwd.getpwnam('elastiq').pw_uid
            gid = grp.getgrnam('elastiq').gr_gid
        except KeyError as e:
            print 'Cannot find elastiq user/group: %s' % e
            return # cannot continue

        # Create empty file
        try:
            fout = open(cfgfile, 'w')
            fout.close()
        except IOError as e:
            print 'Cannot touch elastiq configuration %s: %s' % (cfgfile, e)
            return

        # Change owner and mode
        try:
            os.chown(cfgfile, uid, gid)
            # chmod 0660 --> contains sensitive info!
            os.chmod(cfgfile, stat.S_IRUSR|stat.S_IWUSR | stat.S_IRGRP|stat.S_IWGRP)
        except OSError as e:
            print 'Cannot chown/chmod %s: %s' % (cfgfile, e)
            return

        # Write configuration
        try:
            fout = open(cfgfile, 'w')
            fout.write('# Automatically generated by the elastiq-setup plugin of amiconfig\n')
            fout.write('# Generated at %s\n\n' % (time.strftime('%Y-%m-%d %H:%M:%S %z')))

            for s,c in cfgvar.iteritems():
                fout.write('[%s]\n' % s)
                for k,v in c.iteritems():
                    fout.write('%s = %s\n' % (k,v))
                fout.write('\n')

            fout.close()
        except IOError as e:
            print 'Cannot produce elastiq configuration %s: %s' % (cfgfile, e)

        # Configure CAs for boto
        if self.config_boto_cas( cfgraw.get('cacerts_b64') ) == False:
            return

        # Activate service and start
        try:
            subprocess.call( '/sbin/chkconfig elastiq on'.split(' ') )
            subprocess.call( '/sbin/service elastiq restart'.split(' ') )
        except OSError as e:
            print 'Error while enabling and starting elastiq: %s' % e
            return


    def config_boto_cas(self, cacerts_b64):
        """Configures CAs for boto.
        """

        cas = self.boto_ssl_ca_src
        try:
            cas.append( pkgutil.get_loader('boto.cacerts').filename + '/cacerts.txt' )
        except NoneType:
            pass

        # Creates a flat list of files
        ca_files = []
        for ca in cas:
            if os.path.isdir(ca):
                for e in os.listdir(ca):
                    e_full = ca + '/' + e
                    if e.endswith('.pem') and os.path.isfile(e_full):
                        ca_files.append(e_full)
            else:
                ca_files.append(ca)

        # Merge files
        try:
            with open(self.boto_cas_file, 'w') as ca_out:

                # CAs from files
                for ca_in_fn in ca_files:
                    if os.access(ca_in_fn, os.R_OK):
                        ca_in = open(ca_in_fn, 'r')
                        ca_out.write("\n## Source: %s\n" % ca_in_fn);
                        ca_out.write( ca_in.read() )
                        ca_out.write('\n')
                        ca_in.close()
                    else:
                        print "Cannot read CA file %s" % ca_in_fn

                # Additional CAs in base64 format
                if cacerts_b64 is not None:
                    try:
                        ca_out.write("\n## Source: <base64>\n")
                        ca_out.write( base64.b64decode(cacerts_b64) )
                    except TypeError:
                        print "Invalid base64 in additional CA certificates"

        except IOError as e:
            print "Error producing boto CA file %s: %s" % (self.boto_cas_file, e)
            return False

        # boto configuration
        try:
            with open(self.boto_cfg, 'w') as f:
                f.write('[Boto]\n');
                f.write('ca_certificates_file = %s\n' % self.boto_cas_file)
        except IOError as e:
            print "Error producing boto global configuration file %s: %s" % (self.boto_cfg, e)
            return False

        return True
