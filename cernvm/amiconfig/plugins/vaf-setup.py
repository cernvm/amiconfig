#
# vaf-setup.py -- by Dario Berzano <dario.berzano@cern.ch>
#
# Plugin for amiconfig for configuring the Virtual Analysis Facility.
#
# See: https://github.com/dberzano/virtual-analysis-facility
#

import os
import pwd
import string
import time
import socket
import re

from amiconfig.errors import *
from amiconfig.lib import util
from amiconfig.plugin import AMIPlugin

class AMIConfigPlugin(AMIPlugin):
    name = 'vaf-setup'

    def configure(self):
        """
        [vaf-setup]
        client_settings=alice
        node_type=[master|slave]  # defaults to slave
        auth_method=[alice_ldap|pool_users|<none>]  # defaults to none
        num_pool_accounts=50  # must be specified if auth_method==pool_users
        """

        sshcertauth_src = '/cvmfs/sft.cern.ch/lcg/dev/cvmvaf/sshcertauth'
        sshcertauth_dst = '/var/www/html/auth'
        sshcertauth_conf = '/etc/sshcertauth/conf.php'

        auth_keys_dir = '/etc/ssh/authorized_keys_globus'
        auth_mapfile = '/etc/sshcertauth-x509-map'

        httpd_user = 'apache'
        httpd_ssl_conf = '/etc/httpd/conf.d/ssl.conf'

        ssl_dir = '/etc/grid-security'

        cron_expiry = '/etc/cron.d/sshcertauth'

        sshd_conf = '/etc/ssh/sshd_config'

        sudoers = '/etc/sudoers'

        print "con gioia"
        cfgraw = self.ud.getSection('vaf-setup')

        #
        # Authentication method validation
        #

        if 'auth_method' in cfgraw:
            auth_method = cfgraw['auth_method']
            if auth_method == 'pool_users':
                if 'num_pool_accounts' in cfgraw:
                    try:
                        num_pool_accounts = int(cfgraw['num_pool_accounts'])
                        if num_pool_accounts <= 1:
                            raise ValueError('')
                    except ValueError as e:
                        # Fatal
                        print "Invalid number of pool accounts: %s" % cfgraw['num_pool_accounts']
                        return
                else:
                    # Fatal
                    print "No number of pool accounts specified"
                    return
            elif auth_method == 'alice_ldap':
                num_pool_accounts = 0  # unused
            else:
                # Fatal
                print "Unknown authentication method: %s" % auth_method
                return
        else:
            # No authentication method specified: don't config sshcertauth
            auth_method = None

        if 'node_type' in cfgraw and cfgraw['node_type'] == 'master' and auth_method is not None:

            #
            # Configure sshcertauth
            #

            # Parent creation
            parent = os.path.dirname( sshcertauth_dst )
            if not os.path.isdir(parent):
                try:
                    os.makedirs(parent, 0755)
                except os.error as e:
                    print "Cannot create directory %s: %s" % (parent, e)

            # Symlink
            try:
                if os.path.islink(sshcertauth_dst):
                    os.unlink(sshcertauth_dst)
                os.symlink(sshcertauth_src, sshcertauth_dst)
            except os.error as e:
                print "Cannot create symbolic link %s: %s" % (sshcertauth_dst, e)
                return

            # Create the configuration file for sshcertauth
            parent = os.path.dirname(sshcertauth_conf)
            try:
                os.mkdir(parent, 0755)
            except os.error as e:
                pass

            try:
                f = open( sshcertauth_conf, 'w' )
                lines = [
                    '<?php',
                    '# Automatically generated by the vaf-setup plugin of amiconfig',
                    '# Generated at %s' % (time.strftime('%Y-%m-%d %H:%M:%S %z')),
                    '$$sshPort = 22;',
                    '$$sshKeyDir = "${auth_keys_dir}";',
                    '$$maxValiditySecs = 43200;',
                    '$$pluginUser = "${auth_method}";',
                    '$$opensslBin = "openssl";',
                    '$$mapFile = "${auth_mapfile}";',
                    '$$mapValiditySecs = 172800;',
                    '$$mapIdLow = 1;',
                    '$$mapIdHi = ${num_pool_accounts};',
                    '$$mapUserFormat = "pool%03u";',
                    '?>' ]
                for l in lines:
                    f.write( string.Template(l).substitute( locals() ) )
                    f.write('\n')
                f.close()

            except IOError as e:
                print "Cannot write configuration %s: %s" % (sshcertauth_conf, e)
                return

            # Mapfile with appropriate permissions (rw for httpd user)
            if not os.path.isfile(auth_mapfile):
                try:
                    f = open(auth_mapfile, 'w')
                except IOError as e:
                    print "Cannot create mapfile %s: %s" % (auth_mapfile, e)
                    return
            try:
                httpd_uid = pwd.getpwnam(httpd_user).pw_uid
            except KeyError:
                print 'Cannot find user %s' % httpd_user
                return

            try:
                os.chown(auth_mapfile, httpd_uid, -1)
                os.chmod(auth_mapfile, 0600)
            except OSError as e:
                print 'Cannot chown/chmod %s: %s' % (auth_mapfile, e)
                return

            # Create the configuration file for apache2 (TODO: improve)
            try:
                f = open(httpd_ssl_conf, 'w')
                f.write("""
LoadModule ssl_module modules/mod_ssl.so
Listen 443
AddType application/x-x509-ca-cert .crt
AddType application/x-pkcs7-crl .crl
SSLPassPhraseDialog builtin
SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000)
SSLSessionCacheTimeout 300
SSLMutex default
SSLRandomSeed startup file:/dev/urandom 256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin
<VirtualHost _default_:443>
ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn
SSLEngine on
SSLProtocol all -SSLv2
SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>
SetEnvIf User-Agent ".*MSIE.*" \\
         nokeepalive ssl-unclean-shutdown \\
         downgrade-1.0 force-response-1.0
CustomLog logs/ssl_request_log \\
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \\"%r\\" %b"
### Customized for sshcertauth ###
SSLCertificateFile /etc/grid-security/hostcert.pem
SSLCertificateKeyFile /etc/grid-security/hostkey.pem
#SSLCACertificatePath /cvmfs/alice.cern.ch/x86_64-2.6-gnu-4.1.2/Packages/AliEn/v2-19/api/share/certificates
SSLCACertificatePath /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/etc/grid-security/certificates
SSLVerifyDepth 10
<Directory /var/www/html/auth>
  SSLVerifyClient require
  SSLOptions +StdEnvVars +ExportCertData
  AllowOverride all
</Directory>
</VirtualHost>
""")
                f.close()
            except IOError as e:
                print 'Cannot write %s: %s' % (httpd_ssl_conf, e)

            # Create a new self-signed certificate
            try:
                os.mkdir(ssl_dir, 0755)
            except os.error:
                pass

            my_ipv4 = self.get_ipv4()
            r = os.system( string.Template('openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 ' +
                '-subj "/CN=${my_ipv4}" ' +
                '-keyout ${ssl_dir}/hostkey.pem ' +
                '-out ${ssl_dir}/hostcert.pem').substitute(locals()) )
            if r != 0:
                print 'Error generating certificate and keys'
                return

            try:
                os.chmod(ssl_dir + '/hostcert.pem', 0444)
                os.chmod(ssl_dir + '/hostkey.pem', 0400)
            except os.error:
                print 'Cannot change mode of certificate/key'
                return

            # Enable keys expiration
            try:
                f = open(cron_expiry, 'w')
                f.write('*/5 * * * * root /var/www/html/auth/keys_keeper.sh expiry\n')
                f.close()
            except IOError as e:
                print 'Cannot write %s: %s' % (cron_expiry, e)

            # Authorized keys path for SSH
            try:
                os.mkdir(auth_keys_dir)
                # Preserve authorized keys for root
                root_key = '/root/.ssh/authorized_keys'
                if os.path.isfile(root_key):
                    os.symlink(root_key, auth_keys_dir + '/root')
            except os.error:
                pass

            try:
                f = open(sshd_conf, 'r')
                lines = f.readlines()
                f.close()
                reauth = r'^[ \t]*AuthorizedKeysFile'
                f = open(sshd_conf, 'w')
                for l in lines:
                    if not re.match(reauth, l):
                        f.write(l)
                f.write( 'AuthorizedKeysFile %s/%%u\n' % auth_keys_dir )
                f.close()
            except IOError as e:
                print 'Problem configuring %s: %s' % (sshd_conf, e)

            # sudoers
            try:
                f = open(sudoers, 'r')
                lines = f.readlines()
                f.close()
                rek = r'.*keys_keeper\.sh'
                f = open(sudoers, 'w')
                for l in lines:
                    if not re.match(rek, l):
                        f.write(l)
                f.write('Defaults!%s/keys_keeper.sh !requiretty\n' % sshcertauth_dst)
                f.write('apache ALL=(ALL) NOPASSWD: %s/keys_keeper.sh\n' % sshcertauth_dst)
                f.close()
            except IOError as e:
                print 'Problem configuring %s: %s' % (sshd_conf, e)

            # Restart affected services
            os.system("/sbin/service sshd restart")
            os.system("/sbin/service httpd restart")

            ## end of sshcertauth ##

        if auth_method == 'pool_users':

            # Create pool accounts
            os.system("groupadd -g 50000 pool")
            for i in range(1, num_pool_accounts+1):
                os.system("adduser pool%03u -s /bin/bash -u %u -g 50000" % (i, 50000+i))

        elif auth_method == 'alice_ldap':
            pass

          # # Make chmod resilient: cloud-init tends to change permissons of the
          # # AuthorizedKeysDir, so run chmod *after* it to restore *our* perms
          # local ChmodLine="chmod 0755 \"$AuthorizedKeysDir\""
          # local RcLocal='/etc/rc.d/rc.local'
          # cat "$RcLocal" | grep -v "$ChmodLine" > "$RcLocal".0
          # echo "$ChmodLine" >> "$RcLocal".0
          # mv "$RcLocal".0 "$RcLocal"
          # chmod 0755 "$RcLocal"  # make it executable


    def get_ipv4(self):
      try:
        # No data is actually transmitted (UDP)
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect( ('8.8.8.8', 53) )
        real_ip = s.getsockname()[0]
        s.close()
        return real_ip
      except socket.error as e:
        print "Cannot retrieve current IPv4 address: %s" % e
        return
